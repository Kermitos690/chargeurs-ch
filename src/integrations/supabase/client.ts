
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wokvkfwnqdpdgrquhnub.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indva3ZrZnducWRwZGdycXVobnViIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY3MjkxNTEsImV4cCI6MjA1MjMwNTE1MX0.h_FW68sQZBQx97ogOX71Gli6CSiuOTiQrPTWT5DeEnY";

// Create a typed Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create a mock version of the Supabase client that works with any table
// This is necessary because the generated types don't include all tables
const originalFrom = supabase.from;
supabase.from = function(table) {
  try {
    // Use the original function but with a type assertion to allow any table name
    const result = originalFrom.call(this, table as any);
    
    // Ensure methods return correct format
    const originalSelect = result.select;
    result.select = function(...args) {
      const selectResult = originalSelect.apply(this, args);
      
      // Add wrappers for additional methods
      const originalEq = selectResult.eq;
      if (originalEq) {
        selectResult.eq = async function(column, value) {
          try {
            const response = await originalEq.call(this, column, value);
            return response;
          } catch (error) {
            return { data: null, error };
          }
        };
      }
      
      const originalSingle = selectResult.single;
      if (originalSingle) {
        selectResult.single = async function() {
          try {
            const response = await originalSingle.apply(this);
            return response;
          } catch (error) {
            return { data: null, error };
          }
        };
      }
      
      const originalMaybeSingle = selectResult.maybeSingle;
      if (originalMaybeSingle) {
        selectResult.maybeSingle = async function() {
          try {
            const response = await originalMaybeSingle.apply(this);
            return response;
          } catch (error) {
            return { data: null, error };
          }
        };
      }
      
      return selectResult;
    };
    
    return result;
  } catch (error) {
    console.error(`Error accessing table ${table}:`, error);
    // Return a mock object with the expected methods
    return {
      select: () => ({
        eq: async () => ({ data: null, error: `Table ${table} not found` }),
        single: async () => ({ data: null, error: `Table ${table} not found` }),
        maybeSingle: async () => ({ data: null, error: `Table ${table} not found` }),
        data: null,
        error: `Table ${table} not found`
      }),
      insert: async () => ({ data: null, error: `Table ${table} not found` }),
      update: async () => ({ data: null, error: `Table ${table} not found` }),
      delete: async () => ({ data: null, error: `Table ${table} not found` }),
    };
  }
};

export type { Database };
